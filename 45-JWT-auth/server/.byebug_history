exit
!!current_user
!current_user
current_user
continue
JWT.decode(token, 'flatiron')[0]
JWT.decode(token, 'flatiron')
token
continue
request.headers["Authorization"]
request.headers
request
exit
token
exit
decoded_token
exit
continue
!!current_user
!current_user
current_user
exit
user.authenticate("crisp")
user.authenticate(params[:password])
user = User.find_by(username: params[:username])
User.find_by(username: "vidhi")
User.find_by(username: params[:username])
params
exit
User.create(user_params)
user_params
exit
User.create(user_params)
user_params
params
exit
decoded_token
exit
decoded_token
continue
User.find("20")
decoded_token
continue
JWT.decode(token,'Flatironsecret')
exit
JWT::DecodeError
JWT.decode(token,"Flatironsecret")
token
JWT.decode(token,'Flatironsecret')
JWT.decode(token, 'Flatironsecret')
exit
request.headers["Authorization"]
request.headers
continue
@user
params
exit
@user
params
exit
User.all
params
user
exit
params
exit
JWT.decode(token, 'corgis')
token
exit
JWT.decode(token, 'corgis')
JWT.methods
JWT.decode(token, 'corgis')
token
continue
params
exit
decoded_token
decode_token
decode_toekn
exit
JWT.encode(payload, 'Key')
JWT.encode(payload, 'Key', 'HS256')
JWT.encode(payload, 'myKey', 'HS256')
JWT.methods
JWT
payload
exit
user.authenticate(params['password'])
user = User.find_by(username: params['username'])
params
exit
p.title
p
continue
